// =================================================================
// TAREAS PROGRAMADAS (CRON JOBS)
// =================================================================
// Este archivo contiene las tareas autom√°ticas del sistema,
// como la aplicaci√≥n de recargos por pago tard√≠o y env√≠o de reportes.

const cron = require('node-cron');
const Alumno = require('../models/alumnos');
const Modalidad = require('../models/modalidades');
const Recargo = require('../models/recargos');
const ConfiguracionSistema = require('../models/configuracion');
const { generarReporteDiario } = require('./reporteService');
const { verificarConfiguracionCorreo } = require('./emailService');

// Funci√≥n para calcular meses vencidos desde una fecha fija
const calcularMesesVencidosDesde = (fechaInicio, fechaActual) => {
  // Debug: Verificar que ambos par√°metros sean objetos Date v√°lidos
  if (!(fechaInicio instanceof Date)) {
    console.error('ERROR: fechaInicio no es un objeto Date:', fechaInicio, typeof fechaInicio);
    // Intentar convertir a Date si es posible
    if (fechaInicio) {
      fechaInicio = new Date(fechaInicio);
      if (isNaN(fechaInicio.getTime())) {
        console.error('ERROR: No se pudo convertir fechaInicio a Date v√°lido');
        return 0;
      }
    } else {
      return 0;
    }
  }
  if (!(fechaActual instanceof Date)) {
    console.error('ERROR: fechaActual no es un objeto Date:', fechaActual, typeof fechaActual);
    // Intentar convertir a Date si es posible
    if (fechaActual) {
      fechaActual = new Date(fechaActual);
      if (isNaN(fechaActual.getTime())) {
        console.error('ERROR: No se pudo convertir fechaActual a Date v√°lido');
        return 0;
      }
    } else {
      return 0;
    }
  }
  
  let mesesTranscurridos = (fechaActual.getFullYear() - fechaInicio.getFullYear()) * 12;
  mesesTranscurridos += fechaActual.getMonth() - fechaInicio.getMonth();
  
  if (fechaActual.getDate() < fechaInicio.getDate()) {
    mesesTranscurridos--;
  }
  
  return Math.max(0, mesesTranscurridos);
};

// Funci√≥n para enviar reporte diario autom√°tico
const enviarReporteAutomatico = async () => {
  try {
    console.log('ÔøΩ Ejecutando env√≠o autom√°tico de reporte diario...');
    
    // Verificar configuraci√≥n de correo antes de intentar enviar
    if (!verificarConfiguracionCorreo()) {
      console.warn('‚ö†Ô∏è Configuraci√≥n de correo incompleta. Saltando env√≠o de reporte.');
      return;
    }
    
    const resultado = await generarReporteDiario();
    
    if (resultado.success) {
      console.log('‚úÖ Reporte diario enviado autom√°ticamente');
      console.log(`üìä Datos del reporte:`, resultado.datos);
    } else {
      console.error('‚ùå Error en el env√≠o autom√°tico:', resultado.error);
    }
  } catch (error) {
    console.error('‚ùå Error en la tarea de reporte autom√°tico:', error);
  }
};

// Funci√≥n para aplicar recargos pendientes (versi√≥n simplificada para inicio)
const aplicarRecargosPendientes = async () => {
  try {
    console.log('üîÑ Ejecutando tarea de recargos autom√°ticos...');
    
    // Por ahora, solo hacer un log - implementaci√≥n completa despu√©s
    const alumnos = await Alumno.find().countDocuments();
    console.log(`üìä Total de alumnos en el sistema: ${alumnos}`);
    
    // TODO: Implementar l√≥gica completa de recargos
    console.log('‚úÖ Tarea de recargos completada (modo b√°sico)');
  } catch (error) {
    console.error('‚ùå Error en la tarea de recargos autom√°ticos:', error);
  }
};

// Configurar cron job para ejecutarse diariamente a las 00:01 AM
const iniciarTareasProgramadas = () => {
  // Ejecutar todos los d√≠as a las 5:00 PM - Recargos
  cron.schedule('0 17 * * *', () => {
    console.log('‚è∞ Iniciando tarea programada de recargos...');
    aplicarRecargosPendientes();
  }, {
    timezone: "America/Mexico_City"
  });
  
  // Ejecutar todos los d√≠as a las 8:30 PM - Reporte diario autom√°tico
  cron.schedule('30 20 * * *', () => {
    console.log('‚è∞ Iniciando env√≠o autom√°tico de reporte diario...');
    enviarReporteAutomatico();
  }, {
    timezone: "America/Mexico_City"
  });
  
  console.log('‚úÖ Tareas programadas iniciadas correctamente');
  console.log('üìÖ Los recargos se aplicar√°n autom√°ticamente todos los d√≠as a las 5:00 PM');
  console.log('üìß Los reportes se enviar√°n autom√°ticamente todos los d√≠as a las 8:30 PM');
};

module.exports = {
  iniciarTareasProgramadas,
  aplicarRecargosPendientes, // Exportar para poder ejecutar manualmente si es necesario
  enviarReporteAutomatico, // Exportar para pruebas manuales
  calcularMesesVencidosDesde
};
